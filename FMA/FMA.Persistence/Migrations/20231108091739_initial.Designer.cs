// <auto-generated />
using System;
using FMA.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMA.Persistence.Migrations
{
    [DbContext(typeof(FMADbContext))]
    [Migration("20231108091739_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChauffeurVoertuig", b =>
                {
                    b.Property<Guid>("ChauffeursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoertuigenId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChauffeursId", "VoertuigenId");

                    b.HasIndex("VoertuigenId");

                    b.ToTable("ChauffeurVoertuig");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Aanvraag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AanvraagType")
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginPeriode")
                        .HasColumnType("datetime2");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ChauffeurId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumAanvraag")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EindPeriode")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HerstellingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OnderhoudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.Property<Guid?>("VoertuigId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChauffeurId");

                    b.HasIndex("HerstellingId")
                        .IsUnique()
                        .HasFilter("[HerstellingId] IS NOT NULL");

                    b.HasIndex("OnderhoudId")
                        .IsUnique()
                        .HasFilter("[OnderhoudId] IS NOT NULL");

                    b.HasIndex("VoertuigId");

                    b.ToTable("Aanvraag");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Chauffeur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Geboortedatum")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GemeenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Geslacht")
                        .HasColumnType("int");

                    b.Property<bool>("IsActief")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RijbewijsType")
                        .HasColumnType("int");

                    b.Property<string>("Rijksregisternummer")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength();

                    b.Property<Guid?>("TankkaartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GemeenteId");

                    b.HasIndex("Rijksregisternummer")
                        .IsUnique();

                    b.HasIndex("TankkaartId");

                    b.ToTable("Chauffeur");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BestandType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GemeldeSchadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HerstellingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GemeldeSchadeId");

                    b.HasIndex("HerstellingId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Garage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GemeenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GemeenteId");

                    b.ToTable("Garage");
                });

            modelBuilder.Entity("FMA.Domain.Entities.GeinspecteerdeSchade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GemeldeSchadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HerstellingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InspectieverslagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Kostprijs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Onderdeel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Schade")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GemeldeSchadeId");

                    b.HasIndex("HerstellingTypeId");

                    b.HasIndex("InspectieverslagId");

                    b.ToTable("GeinspecteerdeSchade");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Gemeente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength();

                    b.Property<string>("Stad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Gemeente");
                });

            modelBuilder.Entity("FMA.Domain.Entities.GemeldeSchade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChauffeurId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumMelding")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumSchade")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Schade")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("VoertuigId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChauffeurId");

                    b.HasIndex("VoertuigId");

                    b.ToTable("GemeldeSchade");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Herstelling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumUitvoering")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GemeldeSchadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Kostprijs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VerzekeringsmaatschappijId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoertuigId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GemeldeSchadeId");

                    b.HasIndex("VerzekeringsmaatschappijId");

                    b.HasIndex("VoertuigId");

                    b.ToTable("Herstelling");
                });

            modelBuilder.Entity("FMA.Domain.Entities.HerstellingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("HerstellingType");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Inspectieverslag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ChauffeurAanwezig")
                        .HasColumnType("bit");

                    b.Property<Guid>("ChauffeurId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumUitvoering")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotaalKost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Verslag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("VoertuigId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChauffeurId");

                    b.HasIndex("VoertuigId");

                    b.ToTable("Inspectieverslag");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Kilometerstand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Stand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("VoertuigId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VoertuigId");

                    b.ToTable("Kilometerstand");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Nummerplaat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActief")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Nummerplaat");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Onderhoud", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumUitvoering")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Kostprijs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UitgevoerdeWerken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VoertuigId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.HasIndex("GarageId");

                    b.HasIndex("VoertuigId");

                    b.ToTable("Onderhoud");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Tankkaart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AuthenticatieType")
                        .HasColumnType("int");

                    b.Property<int?>("BrandstofType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GeldigheidsDatum")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsGeblokkeerd")
                        .HasColumnType("bit");

                    b.Property<string>("KaartNummer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("KaartNummer")
                        .IsUnique();

                    b.ToTable("Tankkaart");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Verzekeringsmaatschappij", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GemeenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Referentienummer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GemeenteId");

                    b.ToTable("Verzekeringsmaatschappij");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Voertuig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BrandstofType")
                        .HasColumnType("int");

                    b.Property<string>("Chassisnummer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EersteInschrijving")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LooptijdLeasing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartLeasing")
                        .HasColumnType("datetime2");

                    b.Property<int>("WagenType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Voertuig");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NummerplaatVoertuig", b =>
                {
                    b.Property<Guid>("NummerplatenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoertuigenId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NummerplatenId", "VoertuigenId");

                    b.HasIndex("VoertuigenId");

                    b.ToTable("NummerplaatVoertuig");
                });

            modelBuilder.Entity("ServiceTankkaart", b =>
                {
                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TankkaartenId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServicesId", "TankkaartenId");

                    b.HasIndex("TankkaartenId");

                    b.ToTable("ServiceTankkaart");
                });

            modelBuilder.Entity("ChauffeurVoertuig", b =>
                {
                    b.HasOne("FMA.Domain.Entities.Chauffeur", null)
                        .WithMany()
                        .HasForeignKey("ChauffeursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMA.Domain.Entities.Voertuig", null)
                        .WithMany()
                        .HasForeignKey("VoertuigenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FMA.Domain.Entities.Aanvraag", b =>
                {
                    b.HasOne("FMA.Domain.Entities.Chauffeur", "Chauffeur")
                        .WithMany("Aanvragen")
                        .HasForeignKey("ChauffeurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMA.Domain.Entities.Herstelling", "Herstelling")
                        .WithOne("Aanvraag")
                        .HasForeignKey("FMA.Domain.Entities.Aanvraag", "HerstellingId");

                    b.HasOne("FMA.Domain.Entities.Onderhoud", "Onderhoud")
                        .WithOne("Aanvraag")
                        .HasForeignKey("FMA.Domain.Entities.Aanvraag", "OnderhoudId");

                    b.HasOne("FMA.Domain.Entities.Voertuig", "Voertuig")
                        .WithMany("Aanvragen")
                        .HasForeignKey("VoertuigId");

                    b.Navigation("Chauffeur");

                    b.Navigation("Herstelling");

                    b.Navigation("Onderhoud");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Chauffeur", b =>
                {
                    b.HasOne("FMA.Domain.Entities.Gemeente", "Gemeente")
                        .WithMany("Chauffeurs")
                        .HasForeignKey("GemeenteId");

                    b.HasOne("FMA.Domain.Entities.Tankkaart", "Tankkaart")
                        .WithMany("Chauffeurs")
                        .HasForeignKey("TankkaartId");

                    b.OwnsOne("FMA.Domain.Entities.Adres", "Adres", b1 =>
                        {
                            b1.Property<Guid>("ChauffeurId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bus")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Nummer")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Straat")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ChauffeurId");

                            b1.ToTable("Chauffeur");

                            b1.WithOwner()
                                .HasForeignKey("ChauffeurId");
                        });

                    b.Navigation("Adres");

                    b.Navigation("Gemeente");

                    b.Navigation("Tankkaart");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Document", b =>
                {
                    b.HasOne("FMA.Domain.Entities.GemeldeSchade", "GemeldeSchade")
                        .WithMany("Fotos")
                        .HasForeignKey("GemeldeSchadeId");

                    b.HasOne("FMA.Domain.Entities.Herstelling", "Herstelling")
                        .WithMany("Documenten")
                        .HasForeignKey("HerstellingId");

                    b.Navigation("GemeldeSchade");

                    b.Navigation("Herstelling");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Garage", b =>
                {
                    b.HasOne("FMA.Domain.Entities.Gemeente", "Gemeente")
                        .WithMany("Garages")
                        .HasForeignKey("GemeenteId");

                    b.OwnsOne("FMA.Domain.Entities.Adres", "Adres", b1 =>
                        {
                            b1.Property<Guid>("GarageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bus")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Nummer")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Straat")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("GarageId");

                            b1.ToTable("Garage");

                            b1.WithOwner()
                                .HasForeignKey("GarageId");
                        });

                    b.Navigation("Adres");

                    b.Navigation("Gemeente");
                });

            modelBuilder.Entity("FMA.Domain.Entities.GeinspecteerdeSchade", b =>
                {
                    b.HasOne("FMA.Domain.Entities.GemeldeSchade", "GemeldeSchade")
                        .WithMany("GeinspecteerdeSchades")
                        .HasForeignKey("GemeldeSchadeId");

                    b.HasOne("FMA.Domain.Entities.HerstellingType", "HerstellingType")
                        .WithMany("GeinspecteerdeSchades")
                        .HasForeignKey("HerstellingTypeId");

                    b.HasOne("FMA.Domain.Entities.Inspectieverslag", "Inspectieverslag")
                        .WithMany("GeinspecteerdeSchades")
                        .HasForeignKey("InspectieverslagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GemeldeSchade");

                    b.Navigation("HerstellingType");

                    b.Navigation("Inspectieverslag");
                });

            modelBuilder.Entity("FMA.Domain.Entities.GemeldeSchade", b =>
                {
                    b.HasOne("FMA.Domain.Entities.Chauffeur", "Chauffeur")
                        .WithMany("GemeldeSchades")
                        .HasForeignKey("ChauffeurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMA.Domain.Entities.Voertuig", "Voertuig")
                        .WithMany("GemeldeSchades")
                        .HasForeignKey("VoertuigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chauffeur");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Herstelling", b =>
                {
                    b.HasOne("FMA.Domain.Entities.GemeldeSchade", "GemeldeSchade")
                        .WithMany("Herstellingen")
                        .HasForeignKey("GemeldeSchadeId");

                    b.HasOne("FMA.Domain.Entities.Verzekeringsmaatschappij", "Verzekeringsmaatschappij")
                        .WithMany("Herstellingen")
                        .HasForeignKey("VerzekeringsmaatschappijId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMA.Domain.Entities.Voertuig", "Voertuig")
                        .WithMany("Herstellingen")
                        .HasForeignKey("VoertuigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GemeldeSchade");

                    b.Navigation("Verzekeringsmaatschappij");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Inspectieverslag", b =>
                {
                    b.HasOne("FMA.Domain.Entities.Chauffeur", "Chauffeur")
                        .WithMany("Inspectieverslagen")
                        .HasForeignKey("ChauffeurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMA.Domain.Entities.Voertuig", "Voertuig")
                        .WithMany("Inspectieverslagen")
                        .HasForeignKey("VoertuigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chauffeur");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Kilometerstand", b =>
                {
                    b.HasOne("FMA.Domain.Entities.Voertuig", "Voertuig")
                        .WithMany("Kilometerstanden")
                        .HasForeignKey("VoertuigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Onderhoud", b =>
                {
                    b.HasOne("FMA.Domain.Entities.Document", "Document")
                        .WithOne("Onderhoud")
                        .HasForeignKey("FMA.Domain.Entities.Onderhoud", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMA.Domain.Entities.Garage", "Garage")
                        .WithMany("Onderhouden")
                        .HasForeignKey("GarageId");

                    b.HasOne("FMA.Domain.Entities.Voertuig", "Voertuig")
                        .WithMany("Onderhouden")
                        .HasForeignKey("VoertuigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Garage");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Verzekeringsmaatschappij", b =>
                {
                    b.HasOne("FMA.Domain.Entities.Gemeente", "Gemeente")
                        .WithMany("Verzekeringsmaatschappijen")
                        .HasForeignKey("GemeenteId");

                    b.OwnsOne("FMA.Domain.Entities.Adres", "Adres", b1 =>
                        {
                            b1.Property<Guid>("VerzekeringsmaatschappijId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bus")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Nummer")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Straat")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("VerzekeringsmaatschappijId");

                            b1.ToTable("Verzekeringsmaatschappij");

                            b1.WithOwner()
                                .HasForeignKey("VerzekeringsmaatschappijId");
                        });

                    b.Navigation("Adres");

                    b.Navigation("Gemeente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NummerplaatVoertuig", b =>
                {
                    b.HasOne("FMA.Domain.Entities.Nummerplaat", null)
                        .WithMany()
                        .HasForeignKey("NummerplatenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMA.Domain.Entities.Voertuig", null)
                        .WithMany()
                        .HasForeignKey("VoertuigenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceTankkaart", b =>
                {
                    b.HasOne("FMA.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMA.Domain.Entities.Tankkaart", null)
                        .WithMany()
                        .HasForeignKey("TankkaartenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FMA.Domain.Entities.Chauffeur", b =>
                {
                    b.Navigation("Aanvragen");

                    b.Navigation("GemeldeSchades");

                    b.Navigation("Inspectieverslagen");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Document", b =>
                {
                    b.Navigation("Onderhoud");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Garage", b =>
                {
                    b.Navigation("Onderhouden");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Gemeente", b =>
                {
                    b.Navigation("Chauffeurs");

                    b.Navigation("Garages");

                    b.Navigation("Verzekeringsmaatschappijen");
                });

            modelBuilder.Entity("FMA.Domain.Entities.GemeldeSchade", b =>
                {
                    b.Navigation("Fotos");

                    b.Navigation("GeinspecteerdeSchades");

                    b.Navigation("Herstellingen");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Herstelling", b =>
                {
                    b.Navigation("Aanvraag")
                        .IsRequired();

                    b.Navigation("Documenten");
                });

            modelBuilder.Entity("FMA.Domain.Entities.HerstellingType", b =>
                {
                    b.Navigation("GeinspecteerdeSchades");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Inspectieverslag", b =>
                {
                    b.Navigation("GeinspecteerdeSchades");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Onderhoud", b =>
                {
                    b.Navigation("Aanvraag")
                        .IsRequired();
                });

            modelBuilder.Entity("FMA.Domain.Entities.Tankkaart", b =>
                {
                    b.Navigation("Chauffeurs");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Verzekeringsmaatschappij", b =>
                {
                    b.Navigation("Herstellingen");
                });

            modelBuilder.Entity("FMA.Domain.Entities.Voertuig", b =>
                {
                    b.Navigation("Aanvragen");

                    b.Navigation("GemeldeSchades");

                    b.Navigation("Herstellingen");

                    b.Navigation("Inspectieverslagen");

                    b.Navigation("Kilometerstanden");

                    b.Navigation("Onderhouden");
                });
#pragma warning restore 612, 618
        }
    }
}
